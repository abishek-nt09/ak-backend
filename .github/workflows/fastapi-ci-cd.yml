name: Deploy FastAPI Backend to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Backend to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout latest code
        uses: actions/checkout@v4

      - name: Copy backend files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./"
          target: "/var/www/ats/backend"

      - name: Configure backend and restart service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            echo "🚀 Starting backend deployment..."

            APP_DIR="/var/www/ats/backend"
            cd $APP_DIR

            echo "🔐 Creating .env file dynamically..."
            echo "FRONTEND_HOST=\"http://${{ secrets.EC2_HOST }}\"" > .env
            echo "ENVIRONMENT=\"production\"" >> .env
            echo "BACKEND_CORS_ORIGINS=\"http://${{ secrets.EC2_HOST }}\"" >> .env
            echo "SECRET_KEY=\"${{ secrets.SECRET_KEY }}\"" >> .env
            echo "DATABASE_URL=\"postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASS }}@localhost/${{ secrets.DB_NAME }}\"" >> .env
            echo "AZURE_TENANT_ID=\"${{ secrets.AZURE_TENANT_ID }}\"" >> .env
            echo "AZURE_CLIENT_ID=\"${{ secrets.AZURE_CLIENT_ID }}\"" >> .env
            echo "AZURE_CLIENT_SECRET=\"${{ secrets.AZURE_CLIENT_SECRET }}\"" >> .env
            echo "AZURE_MAILBOX=\"${{ secrets.AZURE_MAILBOX }}\"" >> .env

            echo "✅ .env created successfully!"
            cat .env

            echo "🐍 Setting up Python virtual environment..."
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi

            source venv/bin/activate
            pip install --upgrade pip --quiet

            echo "📦 Installing dependencies..."
            if [ -f requirements.txt ]; then
              pip install --no-cache-dir -r requirements.txt --quiet
            fi

            echo "🔁 Reloading and restarting FastAPI service..."
            sudo systemctl daemon-reload
            sudo systemctl enable fastapi
            sudo systemctl restart fastapi

            echo "✅ Backend deployed successfully!"
