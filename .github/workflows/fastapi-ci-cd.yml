name: FastAPI Backend Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy Backend to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_NAME: ${{ secrets.DB_NAME }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_MAILBOX: ${{ secrets.AZURE_MAILBOX }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          echo "📦 Copying backend files to EC2..."
          scp -i private_key.pem -o StrictHostKeyChecking=no -r ./ ${USER}@${HOST}:/tmp/backend-temp

          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER}@${HOST} << 'EOF'
            set -e
            echo "🚀 Starting backend deployment..."

            APP_DIR="/var/www/ats/backend"
            BACKUP_DIR="/var/www/ats-backups/backend"
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)

            echo "📁 Ensuring backup directory exists..."
            sudo mkdir -p ${BACKUP_DIR}

            if [ -d "${APP_DIR}" ]; then
              echo "🗂 Backing up current version..."
              sudo tar -czf ${BACKUP_DIR}/backend_backup_${TIMESTAMP}.tar.gz -C /var/www/ats backend
            fi

            echo "📂 Cleaning old backups (keeping 3 latest)..."
            cd ${BACKUP_DIR}
            ls -t backend_backup_*.tar.gz | tail -n +4 | xargs -r rm || true

            echo "🔄 Updating backend code..."
            sudo rm -rf ${APP_DIR}
            sudo mv /tmp/backend-temp ${APP_DIR}
            cd ${APP_DIR}

            echo "🐍 Setting up Python virtual environment..."
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate

            echo "📦 Installing dependencies..."
            pip install --upgrade pip
            pip install -r requirements.txt

            echo "⚙️ Creating .env file..."
            cat > .env << ENV
            FRONTEND_HOST="http://${HOST}"
            ENVIRONMENT="production"
            BACKEND_CORS_ORIGINS="http://${HOST}"
            SECRET_KEY="${SECRET_KEY}"
            DATABASE_URL="postgresql://${DB_USER}:${DB_PASS}@localhost/${DB_NAME}"
            AZURE_TENANT_ID="${AZURE_TENANT_ID}"
            AZURE_CLIENT_ID="${AZURE_CLIENT_ID}"
            AZURE_CLIENT_SECRET="${AZURE_CLIENT_SECRET}"
            AZURE_MAILBOX="${AZURE_MAILBOX}"
            ENV

            echo "🔁 Reloading and restarting FastAPI service..."
            sudo systemctl daemon-reload
            sudo systemctl restart fastapi

            echo "✅ Backend deployment completed successfully!"
          EOF
