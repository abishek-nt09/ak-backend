name: Deploy Backend

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  upload-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Copy Backend Code to EC2 (excluding .git)
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          echo "📦 Copying backend files to EC2 (skipping .git & .github)..."
          rsync -avz --exclude '.git' --exclude '.github' --exclude '.venv' \
            -e "ssh -o StrictHostKeyChecking=no -i private_key.pem" ./ ${USER}@${HOST}:/home/${USER}/backend-temp
          
          echo "✅ Files uploaded successfully."

  deploy-backend:
    needs: upload-backend
    runs-on: ubuntu-latest

    steps:
      - name: Deploy on EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_NAME: ${{ secrets.DB_NAME }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_MAILBOX: ${{ secrets.AZURE_MAILBOX }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          echo "🚀 Connecting to EC2 to deploy backend..."
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER}@${HOST} '
            set -e
            APP_DIR="/var/www/ats/backend"

            echo "🧹 Cleaning old backend files..."
            sudo rm -rf $APP_DIR
            sudo mkdir -p $APP_DIR

            echo "📂 Moving uploaded files into place..."
            sudo mv /home/${USER}/backend-temp/* $APP_DIR/
            sudo chown -R ${USER}:www-data $APP_DIR
            cd $APP_DIR

            echo "🐍 Creating virtual environment..."
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            echo "🔐 Creating .env file..."
            cat > .env <<EOF
            FRONTEND_HOST="http://${HOST}"
            ENVIRONMENT="production"
            BACKEND_CORS_ORIGINS="http://${HOST}"
            SECRET_KEY="${SECRET_KEY}"
            DATABASE_URL="postgresql://${DB_USER}:${DB_PASS}@localhost/${DB_NAME}"
            AZURE_TENANT_ID="${AZURE_TENANT_ID}"
            AZURE_CLIENT_ID="${AZURE_CLIENT_ID}"
            AZURE_CLIENT_SECRET="${AZURE_CLIENT_SECRET}"
            AZURE_MAILBOX="${AZURE_MAILBOX}"
            EOF
            
            echo "🔁 Reloading and starting FastAPI service..."
            sudo systemctl daemon-reload
            sudo systemctl enable fastapi
            sudo systemctl restart fastapi
            
            echo "✅ Backend deployment complete!"

          '
